var imageArray = new Array(),
    loadedImgs = 0,
    checkTimer;

var hCheck = false;

window.onload = function () {
    initializeAPI();
}

function initializeAPI() {
    main.classList.add(snips.checkPlatform()[0] + "-" + snips.checkPlatform()[1]);

    myFT.on("richload", function () {
        myFT.on("instantads", function () {
            checkTimer = setInterval(checkAPI, 100);
        });
    });
}

var checkAPI = function () {
    if (myFT.richloadsLoaded == true && myFT.instantAdsLoaded == true) {
        clearInterval(checkTimer);
        setInstantAds();
    }
}

function setInstantAds() {
    try {

        main.style.backgroundColor = myFT.instantAds.background_border_hex.split("|")[0];
        main.style.borderColor = myFT.instantAds.background_border_hex.split("|")[1];

        imageArray.push([keyartImg, myFT.instantAds.keyArt_img]);
        imageArray.push([logoImg, myFT.instantAds.logo_img]);
        imageArray.push([titleImg, myFT.instantAds.title_img]);
        imageArray.push([curtainImg, myFT.instantAds.animeCurtain_img]);
        imageArray.push([main, myFT.instantAds.background_img]);
        imageArray.push([defaultImg, myFT.instantAds.default_img]);

        // attribution logic
        if (myFT.instantAds.attribution_txt.toLowerCase() == "hbo") {
//            imageArray.push([attributionImg, "images/hbo_attImg_728x90.png"]);

            attributionImg.innerHTML = hboLogo; //CHANGES: Since HBO and HBO max seem to be static assets, they are now converted to SVGs to make color changing easier.
            document.querySelector("#attributionImg .cls-1").setAttribute("style", "fill: " + myFT.instantAds.title_attributionImg_hex + ";");
            
            if (myFT.instantAds.title_txt == "") {
                divider.style.display = "none";
            }

//            setTimeout(function () {
//                snips.maskImage(attributionImg, myFT.instantAds.title_attributionImg_hex, 1);
//            }, 1000);
        } else if (myFT.instantAds.attribution_txt.toLowerCase() == "max") {

//            imageArray.push([attributionImg, "images/max_attImg_728x90.png"]);

            attributionImg.innerHTML = hboMaxLogo; //CHANGES: Since HBO and HBO max seem to be static assets, they are now converted to SVGs to make color changing easier.
            
            for(i=0; i < document.querySelectorAll("#attributionImg .cls-1").length; i++){
                document.querySelectorAll("#attributionImg .cls-1")[i].setAttribute("style", "fill: " + myFT.instantAds.title_attributionImg_hex + ";");
            }
            
            if (myFT.instantAds.title_txt == "") {
                divider.style.display = "none";
            }

//            setTimeout(function () {
//                snips.maskImage(attributionImg, myFT.instantAds.title_attributionImg_hex, 1);
//            }, 1000);
        } else {
//            imageArray.push([attributionImg, "images/blank.png"]);
            attributionCont.style.right = "307px";
            divider.style.display = "none";
            blurNotIE1.style.display = "none";
        }
        // end of attribution logic

        if ((myFT.instantAds.headline_txt.toLowerCase().indexOf("<br>") > -1) || (myFT.instantAds.headline_txt.toLowerCase().indexOf("<br/>") > -1)) {
            hCheck = true;
        } else {
            hCheck = false;
        }

        snips.splitText(myFT.instantAds.headline_txt, "hSpan", "hPar", "headlineTxt", myFT.instantAds.headlineTxt_size_hex.split("|")[0] + "px");

        headlineTxt.style.fontSize = myFT.instantAds.headlineTxt_size_hex.split("|")[0] + "px";
        headlineTxt.style.color = myFT.instantAds.headlineTxt_size_hex.split("|")[1];

        titleTxt.innerHTML = myFT.instantAds.title_txt;
        titleTxt.style.color = myFT.instantAds.title_attributionImg_hex;

        divider.style.borderColor = myFT.instantAds.title_attributionImg_hex;

        disclaimerTxt.innerHTML = myFT.instantAds.disclaimer_txt;
        disclaimerTxt.style.fontSize = myFT.instantAds.disclaimerTxt_size_hex.split("|")[0] + "px";
        disclaimerTxt.style.color = myFT.instantAds.disclaimerTxt_size_hex.split("|")[1];

        ctaTxt.innerHTML = myFT.instantAds.cta_txt;
        ctaTxt.style.fontSize = myFT.instantAds.ctaTxt_size_hex_hexHov.split("|")[0] + "px";
        ctaTxt.style.color = myFT.instantAds.ctaTxt_size_hex_hexHov.split("|")[1];

        ctaCont.style.backgroundColor = myFT.instantAds.ctaBtn_hex_hexHov_borderHex_borderHexHov.split("|")[0];
        ctaCont.style.borderColor = myFT.instantAds.ctaBtn_hex_hexHov_borderHex_borderHexHov.split("|")[2];

        ctaCont.addEventListener("mouseover", ctaContHoverOn);
        ctaCont.addEventListener("mouseout", ctaContHoverOff);

        function ctaContHoverOff() {
            ctaTxt.style.color = myFT.instantAds.ctaTxt_size_hex_hexHov.split("|")[1];

            ctaCont.style.backgroundColor = myFT.instantAds.ctaBtn_hex_hexHov_borderHex_borderHexHov.split("|")[0];
            ctaCont.style.borderColor = myFT.instantAds.ctaBtn_hex_hexHov_borderHex_borderHexHov.split("|")[2];
        }

        function ctaContHoverOn() {
            ctaTxt.style.color = myFT.instantAds.ctaTxt_size_hex_hexHov.split("|")[2];

            ctaCont.style.backgroundColor = myFT.instantAds.ctaBtn_hex_hexHov_borderHex_borderHexHov.split("|")[1];
            ctaCont.style.borderColor = myFT.instantAds.ctaBtn_hex_hexHov_borderHex_borderHexHov.split("|")[3];
        }

        if (myFT.instantAds.default_img.indexOf("blank") > -1) {
            preloadImage(initializeUnit);
        } else {
            preloadImage(staticUnit);
        }
        
        //MOVING GRADIENTS
        var gradientColors = myFT.instantAds.background_gradient.split("|");
        
        var gradient1 = document.createElement("div");
        gradient1.id = "gradient1";
        gradient1.style.position = "absolute";
        var gradient1_bg = 'radial-gradient(ellipse at center,' + hexToRGB(gradientColors[0], 1) + '0%, rgba(255,255,255,0) 50%, rgba(255,255,255,0) 100%)';
        gradient1.style.background = gradient1_bg;
        gradient1.style.left = "-373px";
        gradient1.style.top = "-74px";
        gradient1.style.width = "1000px";
        gradient1.style.height = "600px";
        gradientCont.appendChild(gradient1);
        
        var gradient2 = document.createElement("div");
        gradient2.id = "gradient2";
        gradient2.style.position = "absolute";
        var gradient2_bg = 'radial-gradient(ellipse at center,' + hexToRGB(gradientColors[1], 1) + '0%, rgba(255,255,255,0) 50%, rgba(255,255,255,0) 100%)';
        gradient2.style.background = gradient2_bg;
        gradient2.style.left = "-394px";
        gradient2.style.top = "-392px";
        gradient2.style.width = "1000px";
        gradient2.style.height = "600px";
        gradientCont.appendChild(gradient2);
        
        var gradient3 = document.createElement("div");
        gradient3.id = "gradient3";
        gradient3.style.position = "absolute";
        var gradient3_bg = 'radial-gradient(ellipse at center,' + hexToRGB(gradientColors[2], 1) + '0%, rgba(255,255,255,0) 50%, rgba(255,255,255,0) 100%)';
        gradient3.style.background = gradient3_bg;
        gradient3.style.left = "326px";
        gradient3.style.top = "-223px";
        gradient3.style.width = "600px";
        gradient3.style.height = "600px";
        gradientCont.appendChild(gradient3);
        
        var gradient3_color2 = document.createElement("div");
        gradient3_color2.id = "gradient3_color2";
        gradient3_color2.style.position = "absolute";
        var gradient3_color2_bg = 'radial-gradient(ellipse at center,' + hexToRGB(gradientColors[1], 1) + '0%, rgba(255,255,255,0) 50%, rgba(255,255,255,0) 100%)';
        gradient3_color2.style.background = gradient3_color2_bg;
        gradient3_color2.style.left = "376px";
        gradient3_color2.style.top = "-223px";
        gradient3_color2.style.width = "600px";
        gradient3_color2.style.height = "600px";
        gradientCont.appendChild(gradient3_color2);
        
        var gradient4 = document.createElement("div");
        gradient4.id = "gradient4";
        gradient4.style.position = "absolute";
        var gradient4_bg = 'radial-gradient(ellipse at center,' + hexToRGB(gradientColors[1], 1) + '0%, rgba(255,255,255,0) 50%, rgba(255,255,255,0) 100%)';
        gradient4.style.background = gradient4_bg;
        gradient4.style.left = "517px";
        gradient4.style.top = "-374px";
        gradient4.style.width = "600px";
        gradient4.style.height = "600px";
        gradientCont.appendChild(gradient4);
        
        if (myFT.instantAds.background_img.indexOf("blank") > -1){
            
        } else {
            gradientCont.style.opacity = "0";
        }

    } catch (error) {
        console.error("Error on setInstantAds(): " + error.message);
    }
}

function preloadImage(callback) {
    try {
        a = imageArray;

        if (a.length != 0) {
            for (var i = 0; i < a.length; i++) {
                if (a[i][0].tagName.toLowerCase() == "img") {
                    a[i][0].src = a[i][1];
                    a[i][0].addEventListener("load", function f(e) {
                        e.currentTarget.removeEventListener(e.type, f);
                        loadedImgs++;
                    }, false);
                } else {
                    a[i][0].style.backgroundImage = "url('" + a[i][1] + "')";

                    var o = new Image();
                    o.src = a[i][1];
                    o.addEventListener("load", function f(e) {
                        e.currentTarget.removeEventListener(e.type, f);
                        loadedImgs++;
                    }, false);
                }
            }

            var t = setInterval(function () {
                if (a.length === loadedImgs) {
                    clearInterval(t);
                    callback();
                }
            }, 100);
        } else {
            setTimeout(callback, 100);
        }
    } catch (error) {
        console.error("Error on preloadImage(): " + error.message);
    }
}

function staticUnit() {

    console.log("Static..")

    defaultImg.style.display = "block";
    myFT.applyClickTag(main, 1, myFT.instantAds.clickTag1_url);
    main.style.visibility = "visible";
}

function initializeUnit() {
    try {

        myFT.applyClickTag(main, 1, myFT.instantAds.clickTag1_url);
        myFT.applyClickTag(ctaCont, 2, myFT.instantAds.clickTag2_url);

        var headline_lines = document.getElementsByClassName("hParclass");
        var headline_linesX = document.getElementsByClassName("hSpanclass");

        if (hCheck) {
            if (headline_lines[0].innerHTML.length > headline_lines[1].innerHTML.length) {
                snips.textResizeH(headline_lines[0].id, "6px");
                snips.textResizeW(headline_lines[0].id, "6px");
                headline_lines[1].style.fontSize = headline_lines[0].style.fontSize;
            } else {
                snips.textResizeH(headline_lines[1].id, "6px");
                snips.textResizeW(headline_lines[1].id, "6px");
                headline_lines[0].style.fontSize = headline_lines[1].style.fontSize;
            }
        } else {
            headlineCont.style.height = "42px"
            snips.textResizeH(headline_lines[0].id, "6px");
            snips.textResizeW(headline_lines[0].id, "6px");
        }

        headlineTxt.style.fontSize = headline_lines[0].style.fontSize;

        setTimeout(function () {
            headline_linesX[0].style.height = (Number(headline_lines[0].offsetHeight) - 2) + "px";

            headline_lines[0].style.transform = "translate3d(0px," + (Number(headline_lines[0].offsetHeight) + 3) + "px, 0px)";

            snips.horizontallyCenterText(headline_lines[0]);
            snips.verticallyCenterText(headline_lines[0]);

            if (hCheck) {
                headline_lines[1].style.fontSize = headline_lines[0].style.fontSize;
                headline_linesX[1].style.height = (Number(headline_lines[1].offsetHeight) - 2) + "px";

                headline_lines[1].style.transform = "translate3d(0px," + (Number(headline_lines[1].offsetHeight) + 3) + "px, 0px)";

                snips.horizontallyCenterText(headline_lines[1]);
                snips.verticallyCenterText(headline_lines[1]);
            } else {
                // hSpan0.style.top = "1px";
            }

        }, 500)

        setTimeout(function () {
            animate(headline_lines, headline_linesX)
            animateGradient();
        }, 1000);

    } catch (error) {
        console.error("Error on initializeUnit(): " + error.message);
    }
}

function animate(headline_lines, headline_linesX) {
    if (myFT.instantAds.disclaimer_txt == "") {
        if (hCheck) {
            headlineCont.style.top = 1+3+"px";
            logoLockup.style.top = -19+3+"px";
            ctaCont.style.top = 28+3+"px";
        } else {
            headlineCont.style.top = 1+3+"px";
            logoLockup.style.top = -19+3+"px";
            ctaCont.style.top = 28+3+"px";
        }
    }
    main.style.visibility = "visible";

    var tl = new TimelineLite();
    var curtainTiming = 1.9;

    // first reveal
    // if two lines
    if (hCheck) {
        curtainTiming = 1.95;

        tl.to(headline_lines[0], .55, {
            y: 0,
            opacity: 1,
            ease: Power3.easeOut,
            rotation: 0.001,
        }, 1)

        tl.to(headline_lines[1], .5, {
            y: 0,
            opacity: 1,
            ease: Power3.easeOut,
            rotation: 0.001,
        }, 1.2)

        tl.to('#ctaCont', .7, {
            y: 19,
            transformOrigin: '50% 100%',
            ease: Power4.easeOut
        }, 1)

        tl.to('#logoLockup', .7, {
            y: 19,
            transformOrigin: '50% 100%',
            ease: Power4.easeOut
        }, 1)
    }
    // if one line
    else {
        tl.to(headline_lines[0], .5, {
            y: 0,
            opacity: 1,
            ease: Power3.easeOut,
            rotation: 0.001,
        }, 1)

        tl.to('#ctaCont', .7, {
            y: 14,
            transformOrigin: '50% 100%',
            ease: Power4.easeOut
        }, 1)

        tl.to('#logoLockup', .7, {
            y: 14,
            transformOrigin: '50% 100%',
            ease: Power4.easeOut
        }, 1)
    }
    //move left
    // if two lines
    if (hCheck) {
        tl.staggerTo([headline_linesX[0], headline_linesX[1], "#ctaCont", "#logoLockup", "#disclaimerCont"], 0.55, {
            x: 213,
            transformOrigin: '50% 100%',
            ease: Power2.ease
        }, 0.08)

    }
    // if one line
    else {
        tl.staggerTo([headline_linesX[0], "#ctaCont", "#logoLockup", "#disclaimerCont"], 0.55, {
            x: 213,
            transformOrigin: '50% 100%',
            ease: Power2.ease
        }, 0.08)
    }

    //curtain animation
    tl.from('#keyartCont', .5, {
        width: 0,
        transformOrigin: '50% 100%',
        ease: Power2.easeOut
    }, curtainTiming)

//    tl.from('#keyartImg', .5, {
//        x: -50,
//        transformOrigin: '50% 100%',
//        ease: Power2.easeOut
//    }, curtainTiming)

    tl.to('#curtainImg', .6, {
        x: 420,
        transformOrigin: '50% 100%',
        ease: Power4.ease
    }, curtainTiming + .08)

    tl.to(['#attributionImg', '#attributionCont'], .5, {
        opacity: 1,
        ease: Power2.easeOut
    }, 2.60)

}

function hexToRGB(hex, alpha) {
    hex = hex.replace('#', '');
    var r = parseInt(hex.length == 3 ? hex.slice(0, 1).repeat(2) : hex.slice(0, 2), 16);
    var g = parseInt(hex.length == 3 ? hex.slice(1, 2).repeat(2) : hex.slice(2, 4), 16);
    var b = parseInt(hex.length == 3 ? hex.slice(2, 3).repeat(2) : hex.slice(4, 6), 16);
    if (alpha) {
        return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';
    } else {
        return 'rgb(' + r + ', ' + g + ', ' + b + ')';
    }
}

function animateGradient() {
    TweenLite.fromTo(gradient1, 1, {
        opacity: 1
    }, {
        delay: 1,
        opacity: 0.3
    });
    
    TweenLite.to(gradient1, 1, {
        delay: 3.5,
        opacity: 1
    });
    
    TweenLite.fromTo(gradient2, 1, {
        x: 0,
        opacity: 1
    }, {
        delay: 1,
        x: -20,
        opacity: 0.5
    });
    
    TweenLite.to(gradient2, 1, {
        delay: 3.5,
        x: 0,
        opacity: 1
    });
    
    TweenLite.fromTo(gradient3, 1, {
        opacity: 1
    }, {
        delay: 1.3,
        opacity: 0.3
    });
    
    TweenLite.to(gradient3, 1, {
        delay: 3.8,
        opacity: 1
    });
    
    TweenLite.fromTo(gradient3_color2, 2, {
        opacity: 0
    }, {
        delay: 1.3,
        opacity: 0.6
    });
    
    TweenLite.to(gradient3_color2, 2, {
        delay: 3.8,
        opacity: 0
    });
    
    TweenLite.to(gradient3_color2, 2, {
        delay: 4.3,
        opacity: 1
    });
    
    TweenLite.fromTo(gradient4, 1, {
        opacity: 1
    }, {
        delay: 1,
        opacity: 0.3
    });
    
    TweenLite.to(gradient4, 1, {
        delay: 3.5,
        opacity: 1
    });
}
